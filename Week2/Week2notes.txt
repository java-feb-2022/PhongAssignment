Object
    Attributes 
    methods- action or functions belonging to a class.group together by similar functionality. call it in the main/test file 

    custom data type:

    Lecture notes: 2/14th
    -OOP- is way of programing/paradyme. It's a design pattern 
    -everything has to be part of the class
    -OOP
    -Encapsulation
        encapulating all relating things into one group
        hiding complexity 
        

    -Abstration
    -Polymorphism
    -Interitance - parent/child 
--------------=================------------
	--Interitance**
	Employee class
	-private email
	-private pay


	public {
		//print emp detail 
	}

	Eng = project and skills
	Sales Rep- targets 


Abstraction 
- filter out detial 
abstract keyword
Build on top of Abstracted layers

Interface - pure abstract classes 


























import java.util.Random;
public class BankAccount {

	// static things (belonging to the BankAccount class)
	public static int numAccounts = 0;
	public static double totalHoldings = 0;
	
    // Ninja Bonus (Solutions vary!)
    private static int generateId() {
		Random randGenerator = new Random();
        int randomId = randGenerator.nextInt(1000000000) + 999999999;
		return randomId;
	}

    // instance things (belonging to a particular bank account)
	private int accountNumber; // Ninja Bonus (could also have been a string)

	private double checkingBalance;
	private double savingsBalance;

	public BankAccount() {
		BankAccount.numAccounts += 1;
		this.checkingBalance = 0;
		this.savingsBalance = 0;
		this.accountNumber = BankAccount.generateId();
	}
	
	public double getCheckingBalance() {
		return this.checkingBalance;
	}

	public double getSavingsBalance() {
		return this.savingsBalance;
	}
    public int getAccountNumber() {
        return this.accountNumber;
    }

	public void depositMoney(double amount, String account) {
		if(account.equals("savings"))
			this.savingsBalance += amount;
		else if(account.equals("checking"))
			this.checkingBalance += amount;
		BankAccount.totalHoldings += amount;
	}

	public void withdrawMoney(double amount, String account) {
		boolean successful = false;
		if(account.equals("savings")) {
			// check if enough in account
			if(this.savingsBalance - amount >= 0) {
				successful = true;
				this.savingsBalance -= amount;
			}
		}
		else if(account.equals("checking")) {
			// check if enough in account
			if(this.checkingBalance - amount >= 0) {
				successful = true;
				this.checkingBalance -= amount;
			}
		}
		if(successful) {
			BankAccount.totalHoldings -= amount;
		}
        else {
            System.out.println("Insufficient funds.");
        }
	}

	public void displayAccountBalance() {
		// %.2f formats decimal to the 10s place (like for moniez)
		System.out.println(String.format("Savings: %.2f, Checking: %.2f", this.savingsBalance, this.checkingBalance));
	}



}







class TestBankAccount {
    public static void main(String[] args) {
		BankAccount ba = new BankAccount();
        System.out.println("New Acc No. - " + ba.getAccountNumber());
		ba.depositMoney(100.49, "checking");
		ba.depositMoney(3.00, "savings");
		ba.displayAccountBalance();

		System.out.println(BankAccount.totalHoldings);

		ba.withdrawMoney(50, "checking");
		ba.withdrawMoney(50, "savings");
		ba.displayAccountBalance();

		System.out.println(BankAccount.totalHoldings);

        BankAccount ba2 = new BankAccount();
        System.out.println("New Acc No. - " + ba2.getAccountNumber());
		ba2.depositMoney(3, "checking");
		ba2.depositMoney(99, "savings");
		ba2.displayAccountBalance();
        ba2.withdrawMoney(50, "checking");
	}
}
























// Application Simulations

        // Add the item1 to order2's item list and increment the order's total.
        order2.items.add(item1);
        order2.total += item1.price;

        // order3 ordered a capuccino. Add the cappuccino to their order and to their tab.
        order3.items.add(item4);
        order3.total += item4.price;

        // order4 added a latte. Update accordingly.
        order4.items.add(item2);
        order4.total += item2.price;

        // Cindhuri’s order is now ready.  Update her status.
        order1.ready = true;

        // Sam ordered more drinks -- 2 lattes. Update their order as well.
        order4.items.add(item2);
        order4.items.add(item2);
        order4.total += item2.price * 2;

        // Jimmy’s order is now ready. Update his status.
        order2.ready = true;

         // Use this example code to test various orders' updates
        System.out.printf("Name: %s\n", order1.name);
        System.out.printf("Total: %s\n", order1.total);
        System.out.printf("Ready: %s\n", order1.ready);

        System.out.printf("Name: %s\n", order2.name);
        System.out.printf("Total: %s\n", order2.total);
        System.out.printf("Ready: %s\n", order2.ready);

        System.out.printf("Name: %s\n", order3.name);
        System.out.printf("Total: %s\n", order3.total);
        System.out.printf("Ready: %s\n", order3.ready);
    
        System.out.printf("Name: %s\n", order4.name);
        System.out.printf("Total: %s\n", order4.total);
        System.out.printf("Ready: %s\n", order4.ready);
