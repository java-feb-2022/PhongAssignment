CRUD Walkthrough and Dependecy
    Pkg:
        Main Package 
        Controller
        {
                    public class NftArtController 
            
            @Autowired
            private ArtService artService; 
            
            @GetMapping("/")
            public String index (Model viewmodel) {
                viewmodel.addAttribute("art",artService.getAllArt()); 
                
                return "index.jsp"; 
            }

            // Add/Create 
            //bind the data  @ModelAttribute "name of object" send it to jsp
            @GetMapping("/new") 
            public String newArt(@ModelAttribute("art") Art art) {
                return "new.jsp"; 
            }
            
            //receive from input. then send to service 
            @PostMapping("/create")
                public String create(@Valid @ModelAttribute("art") Art art, BindingResult result) {
                if(result.hasErrors()) {
                    return "new.jsp"; 
                }else {
                    //send it to artService 
                artService.createArt(art);
                
                return "redirect:/"; // redirect back to root 
                }
            }
                
            //edit /update
            
            
            @GetMapping ("/edit/{id}")
            public String edit(@PathVariable Long id, Model model) {
                Art editArt=artService.artDetail(id);  
                model.addAttribute("editArt", editArt);  
                return "edit.jsp"; 
            }
            @PutMapping("/update/{id}")
            public String update(@ModelAttribute("editArt") Art art) {
                artService.updateArt(art); 
                return "redirect:/"; 
            }
        }
        model
        repository{ 
            Extends

            import java.util.List;

            import org.springframework.data.repository.CrudRepository;
            import org.springframework.stereotype.Repository;

            import com.phong.nftart.model.Art;

            @Repository  
            public interface Artrepository extends CrudRepository<Art, Long > {
                List<Art> findAll() ; 

            }
        }

        services {
            @Autowired

                private Artrepository artRepo;
                //CRUD will be done here 
                
                
                //all art 
                
                public List<Art> getAllArt() {
                    return artRepo.findAll();
                    
                }
                //create art
                
                public Art createArt(Art newArt) {
                    return artRepo.save(newArt); 
                }
                //art details
                public Art artDetail(Long id) {
                    return artRepo.findById(id).orElse(null); 
                }
                
                //update art
                
                public Art updateArt(Art updatedArt) {
                    return artRepo.save(updatedArt); 
                }
                
                //delete art
                
                public void delete(Long id) {
                    artRepo.deleteById(id);
                }
            }
scr-main-webapp-WEB-INF 
Application.properties
        {
        spring.mvc.view.prefix=/WEB-INF/
        spring.datasource.url=jdbc:mysql://localhost:3306/nft_art
        spring.datasource.username=root
        spring.datasource.password=root
        spring.datasource.driver-class-name=com.mysql.jdbc.Driver
        spring.jpa.hibernate.ddl-auto=update
        spring.mvc.hiddenmethod.filter.enabled=true
        }
pom.xml{
    
        <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.tomcat.embed</groupId>
                <artifactId>tomcat-embed-jasper</artifactId>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
            </dependency>

    }

